const axios = require('axios')

api = (() => {})
api.call = async () => {

	// download file and grab players
	let downloadFile = `https://tagpro.koalabeast.com/history/gameFile?gameId=655ff4bd1697cb13b0bfa14c&userId=`
	let raw = await axios.get(downloadFile)

	raw.headers['content-type']

	// find players
	let lines = raw.data.trim().split('\n')
	for (let line of lines) {
		if(line.includes('recorder-metadata')) {
			let jsonArray = await JSON.parse(line)
			let players = jsonArray[2].players

			let rawPlayers = []
			for(let player of players) {
				let timePlayed = getTimestampDifferenceInSeconds(player.joined, player.left)
				if(timePlayed >= 30) {
					player.flair = await getFlair(player.displayName, raw.data.trim().split('\n'))
					rawPlayers.push(player)
				}
			}

			if(rawPlayers.length < 8)
				throw 'There are not enough players playing: ' + rawPlayers.length

			// remove duplicate players
			rawPlayers = removePlayerDuplicatesAndPreserveNull(rawPlayers)

			// check that there are at least 3 players on each team
			let evenTeams = checkEvenTeams(rawPlayers)
			if(!evenTeams)
				throw 'Teams are not even'

			rawPlayers = await preventExploitChangingNameAfterLoad(rawPlayers, raw.data.trim().split('\n'))
		}
	}

	async function getFlair(playerName, lines) {
		for (let line of lines) {
			if(line.includes(playerName) && line.includes('flair":{"x":')) {
				let json = await JSON.parse(line)
				if(json[2][0].flair)
					return {
						x: json[2][0].flair.x,
						y: json[2][0].flair.y,
						className: json[2][0].flair.className
					}
			}
		}
		// if no flair
		return null
	}

	function getTimestampDifferenceInSeconds(timestamp1, timestamp2) {
		const date1 = new Date(timestamp1)
		const date2 = new Date(timestamp2)

		const differenceInMilliseconds = date2 - date1

		return differenceInMilliseconds / 1000
	}

	function removePlayerDuplicatesAndPreserveNull(arr) {
		const seenReal = {}
		const seenFake = {}
		const result = []

		arr.reverse()

		for (let player of arr) {
			if (!seenReal[player.userId] && player.userId != null) { // real players. no duplicates
				result.push(player);
				seenReal[player.userId] = true;
			}
		else if (!seenFake[player.displayName] && player.userId == null) { // fake player
				result.push(player);
				seenFake[player.displayName] = true;
			}
		}

		return result;
	}

	function checkEvenTeams(arr) {
		const teamCounts = {};

		// Count the number of entries for each team
		arr.forEach((item) => {
			const teamId = item.team;
			teamCounts[teamId] = (teamCounts[teamId] || 0) + 1;
		});

		// Check if each team has at least 3 entries
		const team1Count = teamCounts[1] || 0;
		const team2Count = teamCounts[2] || 0;

		return team1Count >= 4 && team2Count >= 4;
	}



}

api.call()
